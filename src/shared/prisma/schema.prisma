generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator erd {
  provider = "prisma-erd-generator-markdown"
  output   = "./ERD.md"
}

model User {
  id        String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email     String        @unique
  password  String?
  fullName  String
  cards     Card[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  settings  UserSettings?
}

model UserSettings {
  id          String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  colorScheme ColorScheme @default(System)
  userId      String      @unique @db.Uuid
  user        User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  locale      Locale?     @relation(fields: [localeId], references: [id], onDelete: Cascade)
  localeId    String?     @db.VarChar(15)
}

model Locale {
  id           String         @unique @db.VarChar(15)
  languageCode String
  countryCode  String?
  script       String?
  formalName   String
  nativeName   String
  commonName   String?
  userSettings UserSettings[]
}

enum ColorScheme {
  System
  Light
  Dark
}

enum AvailableBank {
  Monobank
  PKO
}

model Card {
  id                String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  originalId        String?
  description       String?
  cardNumber        String
  startTrackingTime DateTime
  transactions      Transaction[]
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  bank              AvailableBank
  monobankDetails   MonobankDetails?
  pkoDetails        PKODetails?
  userId            String           @db.Uuid
  user              User             @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model MonobankDetails {
  id           String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  token        String
  isTokenValid Boolean @default(true)
  cardId       String  @unique @db.Uuid
  card         Card    @relation(fields: [cardId], references: [id], onDelete: Cascade)
}

model PKODetails {
  id     String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  token  String
  cardId String @unique @db.Uuid
  card   Card   @relation(fields: [cardId], references: [id], onDelete: Cascade)
}

model Transaction {
  id                  String                         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  originalId          String                         @unique
  description         String?
  originalDescription String?
  tags                TransactionTagsOfTransaction[]
  amount              Decimal                        @db.Decimal(9, 2)
  currencyCode        Int
  createdAt           DateTime
  cardId              String                         @db.Uuid
  card                Card                           @relation(fields: [cardId], references: [id], onDelete: Cascade)
}

model TransactionTag {
  id           Int                            @id @default(autoincrement())
  name         String                         @unique
  transactions TransactionTagsOfTransaction[]
  createdAt    DateTime                       @default(now())
}

model TransactionTagsOfTransaction {
  transactionId String         @db.Uuid
  transaction   Transaction    @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  tagId         Int
  tag           TransactionTag @relation(fields: [tagId], references: [id])
  createdAt     DateTime       @default(now())

  @@id([transactionId, tagId])
}
