generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator erd {
  provider = "prisma-erd-generator-markdown"
  output   = "./ERD.md"
}

model User {
  id        String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email     String        @unique
  password  String?
  fullName  String        @map("full_name")
  cards     Card[]
  createdAt DateTime      @default(now()) @map("created_at")
  updatedAt DateTime      @updatedAt @map("updated_at")
  settings  UserSettings?
}

model UserSettings {
  id          String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  colorScheme ColorScheme @default(System) @map("color_scheme")
  userId      String      @unique @map("user_id") @db.Uuid
  user        User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  locale      Locale?     @relation(fields: [localeId], references: [id], onDelete: Cascade)
  localeId    String?     @map("locale_id") @db.VarChar(15)
}

model Locale {
  id           String         @unique @db.VarChar(15)
  languageCode String         @map("language_code")
  countryCode  String?        @map("country_code")
  script       String?
  formalName   String         @map("formal_name")
  nativeName   String         @map("native_name")
  commonName   String?        @map("common_name")
  userSettings UserSettings[]
}

enum ColorScheme {
  System
  Light
  Dark
}

enum AvailableBank {
  Monobank
  PKO
}

model Card {
  id                String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  originalId        String?          @unique @map("original_id")
  description       String?
  cardNumber        String           @unique @map("card_number")
  startTrackingTime DateTime         @map("start_tracking_time")
  transactions      Transaction[]
  createdAt         DateTime         @default(now()) @map("created_at")
  updatedAt         DateTime         @updatedAt @map("updated_at")
  bank              AvailableBank
  monobankDetails   MonobankDetails?
  pkoDetails        PKODetails?
  userId            String           @map("user_id") @db.Uuid
  user              User             @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model MonobankDetails {
  id           String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  token        String
  isTokenValid Boolean @default(true) @map("is_token_valid")
  cardId       String  @unique @map("card_id") @db.Uuid
  card         Card    @relation(fields: [cardId], references: [id], onDelete: Cascade)
}

model PKODetails {
  id     String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  token  String
  cardId String @unique @map("card_id") @db.Uuid
  card   Card   @relation(fields: [cardId], references: [id], onDelete: Cascade)
}

model Transaction {
  id                  String                         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  originalId          String                         @unique @map("original_id")
  description         String?
  originalDescription String?                        @map("original_description")
  tags                TransactionTagsOfTransaction[]
  amount              Decimal                        @db.Decimal(9, 2)
  currencyCode        Int                            @map("currency_code")
  createdAt           DateTime                       @default(now()) @map("created_at")
  cardId              String                         @map("card_id") @db.Uuid
  card                Card                           @relation(fields: [cardId], references: [id], onDelete: Cascade)
}

model TransactionTag {
  id           Int                            @id @default(autoincrement())
  name         String                         @unique
  transactions TransactionTagsOfTransaction[]
  createdAt    DateTime                       @default(now()) @map("created_at")
}

model TransactionTagsOfTransaction {
  transactionId String         @map("transaction_id") @db.Uuid
  transaction   Transaction    @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  tagId         Int            @map("tag_id")
  tag           TransactionTag @relation(fields: [tagId], references: [id])
  createdAt     DateTime       @default(now()) @map("created_at")

  @@id([transactionId, tagId])
}
